{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"gnmic (pronoun.: gee\u00b7en\u00b7em\u00b7eye\u00b7see) is a gNMI CLI client that provides full support for Capabilities, Get, Set and Subscribe RPCs with collector capabilities. Features # Full support for gNMI RPCs Every gNMI RPC has a corresponding command with all of the RPC options configurable by means of the local and global flags. Multi-target operations Commands can operate on multiple gNMI targets for bulk configuration/retrieval/subscription. File based configuration gnmic supports configurations provided in a file . The configuration options are consistent with the CLI flags. Multiple subscriptions With file based configuration it is possible to define and configure multiple subscriptions which can be independently associated with gNMI targets. Inspect gNMI messages With the textproto output format and the logging capabilities of gnmic you can see the actual gNMI messages being sent/received. Its like having a gNMI looking glass! Configurable TLS enforcement gNMI client supports both TLS and non-TLS transports so you can start using it in a lab environment without having to care about the PKI. Dial-out telemetry The dial-out telemetry server is provided for Nokia SR OS. Pre-built multi-platform binaries Statically linked binaries made in our release pipeline are available for major operating systems and architectures. Making installation a breeze! Extensive and friendly documentation You won't be in need to dive into the source code to understand how gnimc works, our documentation site has you covered. Quick start guide # Installation # curl -sL https://github.com/karimra/gnmic/raw/master/install.sh | sudo bash Capabilities request # gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure capabilities Get request # gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ get --path /state/system/platform Set request # gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ set --update-path /configure/system/name \\ --update-value gnmic_demo Subscribe request # gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ sub --path \"/state/port[port-id=1/1/c1/1]/statistics/in-packets\"","title":"Home"},{"location":"#features","text":"Full support for gNMI RPCs Every gNMI RPC has a corresponding command with all of the RPC options configurable by means of the local and global flags. Multi-target operations Commands can operate on multiple gNMI targets for bulk configuration/retrieval/subscription. File based configuration gnmic supports configurations provided in a file . The configuration options are consistent with the CLI flags. Multiple subscriptions With file based configuration it is possible to define and configure multiple subscriptions which can be independently associated with gNMI targets. Inspect gNMI messages With the textproto output format and the logging capabilities of gnmic you can see the actual gNMI messages being sent/received. Its like having a gNMI looking glass! Configurable TLS enforcement gNMI client supports both TLS and non-TLS transports so you can start using it in a lab environment without having to care about the PKI. Dial-out telemetry The dial-out telemetry server is provided for Nokia SR OS. Pre-built multi-platform binaries Statically linked binaries made in our release pipeline are available for major operating systems and architectures. Making installation a breeze! Extensive and friendly documentation You won't be in need to dive into the source code to understand how gnimc works, our documentation site has you covered.","title":"Features"},{"location":"#quick-start-guide","text":"","title":"Quick start guide"},{"location":"#installation","text":"curl -sL https://github.com/karimra/gnmic/raw/master/install.sh | sudo bash","title":"Installation"},{"location":"#capabilities-request","text":"gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure capabilities","title":"Capabilities request"},{"location":"#get-request","text":"gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ get --path /state/system/platform","title":"Get request"},{"location":"#set-request","text":"gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ set --update-path /configure/system/name \\ --update-value gnmic_demo","title":"Set request"},{"location":"#subscribe-request","text":"gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ sub --path \"/state/port[port-id=1/1/c1/1]/statistics/in-packets\"","title":"Subscribe request"},{"location":"basic_usage/","text":"The following examples demonstrate the basic usage of the gnmic in a scenario where the remote target runs insecure (not TLS enabled) gNMI server. The admin:admin credentials are used to connect to the gNMI server running at 10.1.0.11:57400 address. Info For the complete command usage examples, refer to the \"Command reference\" menu. Capabilities RPC # Getting the device's capabilities is done with capabilities command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure capabilities gNMI_Version: 0.7.0 supported models: - nokia-conf, Nokia, 19.10.R2 - nokia-state, Nokia, 19.10.R2 - nokia-li-state, Nokia, 19.10.R2 - nokia-li-conf, Nokia, 19.10.R2 << SNIPPED >> supported encodings: - JSON - BYTES Get RPC # Retrieving the data snapshot from the target device is done with get command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ get --path /state/system/platform { \"source\": \"10.1.0.11:57400\", \"timestamp\": 1592829586901061761, \"time\": \"2020-06-22T14:39:46.901061761+02:00\", \"updates\": [ { \"Path\": \"state/system/platform\", \"values\": { \"state/system/platform\": \"7750 SR-1s\" } } ] } Set RPC # Modifying state of the target device is done with set command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ set --update-path /configure/system/name \\ --update-value gnmic_demo { \"source\": \"0.tcp.eu.ngrok.io:12267\", \"timestamp\": 1592831593821038738, \"time\": \"2020-06-22T15:13:13.821038738+02:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"configure/system/name\" } ] } Subscribe RPC # Subscription to the gNMI telemetry data can be done with subscribe command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ sub --path \"/state/port[port-id=1/1/c1/1]/statistics/in-packets\" { \"source\": \"0.tcp.eu.ngrok.io:12267\", \"timestamp\": 1592832965197288856, \"time\": \"2020-06-22T15:36:05.197288856+02:00\", \"prefix\": \"state/port[port-id=1/1/c1/1]/statistics\", \"updates\": [ { \"Path\": \"in-packets\", \"values\": { \"in-packets\": \"12142\" } } ] } YANG path browser # gnmic can produce a list of XPATH/gNMI paths for a given YANG model with its path command. The paths in that list can be used as the --path values for the Get/Set/Subscribe commands. # nokia model gnmic path -m nokia-state --file nokia-state-combined.yang | head -10 /state/aaa/radius/statistics/coa/dropped/bad-authentication /state/aaa/radius/statistics/coa/dropped/missing-auth-policy /state/aaa/radius/statistics/coa/dropped/invalid /state/aaa/radius/statistics/coa/dropped/missing-resource /state/aaa/radius/statistics/coa/received /state/aaa/radius/statistics/coa/accepted /state/aaa/radius/statistics/coa/rejected /state/aaa/radius/statistics/disconnect-messages/dropped/bad-authentication /state/aaa/radius/statistics/disconnect-messages/dropped/missing-auth-policy /state/aaa/radius/statistics/disconnect-messages/dropped/invalid","title":"Basic usage"},{"location":"basic_usage/#capabilities-rpc","text":"Getting the device's capabilities is done with capabilities command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure capabilities gNMI_Version: 0.7.0 supported models: - nokia-conf, Nokia, 19.10.R2 - nokia-state, Nokia, 19.10.R2 - nokia-li-state, Nokia, 19.10.R2 - nokia-li-conf, Nokia, 19.10.R2 << SNIPPED >> supported encodings: - JSON - BYTES","title":"Capabilities RPC"},{"location":"basic_usage/#get-rpc","text":"Retrieving the data snapshot from the target device is done with get command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ get --path /state/system/platform { \"source\": \"10.1.0.11:57400\", \"timestamp\": 1592829586901061761, \"time\": \"2020-06-22T14:39:46.901061761+02:00\", \"updates\": [ { \"Path\": \"state/system/platform\", \"values\": { \"state/system/platform\": \"7750 SR-1s\" } } ] }","title":"Get RPC"},{"location":"basic_usage/#set-rpc","text":"Modifying state of the target device is done with set command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ set --update-path /configure/system/name \\ --update-value gnmic_demo { \"source\": \"0.tcp.eu.ngrok.io:12267\", \"timestamp\": 1592831593821038738, \"time\": \"2020-06-22T15:13:13.821038738+02:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"configure/system/name\" } ] }","title":"Set RPC"},{"location":"basic_usage/#subscribe-rpc","text":"Subscription to the gNMI telemetry data can be done with subscribe command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ sub --path \"/state/port[port-id=1/1/c1/1]/statistics/in-packets\" { \"source\": \"0.tcp.eu.ngrok.io:12267\", \"timestamp\": 1592832965197288856, \"time\": \"2020-06-22T15:36:05.197288856+02:00\", \"prefix\": \"state/port[port-id=1/1/c1/1]/statistics\", \"updates\": [ { \"Path\": \"in-packets\", \"values\": { \"in-packets\": \"12142\" } } ] }","title":"Subscribe RPC"},{"location":"basic_usage/#yang-path-browser","text":"gnmic can produce a list of XPATH/gNMI paths for a given YANG model with its path command. The paths in that list can be used as the --path values for the Get/Set/Subscribe commands. # nokia model gnmic path -m nokia-state --file nokia-state-combined.yang | head -10 /state/aaa/radius/statistics/coa/dropped/bad-authentication /state/aaa/radius/statistics/coa/dropped/missing-auth-policy /state/aaa/radius/statistics/coa/dropped/invalid /state/aaa/radius/statistics/coa/dropped/missing-resource /state/aaa/radius/statistics/coa/received /state/aaa/radius/statistics/coa/accepted /state/aaa/radius/statistics/coa/rejected /state/aaa/radius/statistics/disconnect-messages/dropped/bad-authentication /state/aaa/radius/statistics/disconnect-messages/dropped/missing-auth-policy /state/aaa/radius/statistics/disconnect-messages/dropped/invalid","title":"YANG path browser"},{"location":"global_flags/","text":"address # The address flag [-a | --address] is used to specify the target's gNMI server address in address:port format, for e.g: 192.168.113.11:57400 Multiple target addresses can be specified, either as comma separated values: gnmic --address 192.168.113.11:57400,192.168.113.12:57400 or by using the --address flag multiple times: gnmic -a 192.168.113.11:57400 --address 192.168.113.12:57400 config # The --config flag specifies the location of a configuration file that gnmic will read. Defaults to $HOME/.gnmic.yaml . debug # The debug flag [-d | --debug] enables the printing of extra information when sending/receiving an RPC encoding # The encoding flag [-e | --encoding] is used to specify the gNMI encoding of the Update part of a Notification message. It is case insensitive and must be one of: JSON, BYTES, PROTO, ASCII, JSON_IETF format # Five output formats can be configured by means of the --format flag. [proto, protojson, prototext, json, event] The default format is json . The proto format outputs the gnmi message as raw bytes, this value is not allowed when the output type is file (file system, stdout or stderr) see outputs The prototext and protojson formats are the message representation as defined in prototext and protojson The event format emits the received gNMI SubscribeResponse updates and deletes as a list of events tagged with the keys present in the subscribe path (as well as some metadata) and a timestamp Here goes an example of the same response emitted to stdout in the respective formats: protojson { \"update\" : { \"timestamp\" : \"1595584408456503938\" , \"prefix\" : { \"elem\" : [ { \"name\" : \"state\" }, { \"name\" : \"system\" }, { \"name\" : \"version\" } ] }, \"update\" : [ { \"path\" : { \"elem\" : [ { \"name\" : \"version-string\" } ] }, \"val\" : { \"stringVal\" : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } ] } } prototext update : { timestamp : 1595584168675434221 prefix : { elem : { name : \"state\" } elem : { name : \"system\" } elem : { name : \"version\" } } update : { path : { elem : { name : \"version-string\" } } val : { string_val : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } } json { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"default\" , \"timestamp\" : 1595584326775141151 , \"time\" : \"2020-07-24T17:52:06.775141151+08:00\" , \"prefix\" : \"state/system/version\" , \"updates\" : [ { \"Path\" : \"version-string\" , \"values\" : { \"version-string\" : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } ] } event [ { \"name\" : \"default\" , \"timestamp\" : 1595584587725708234 , \"tags\" : { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/state/system/version/version-string\" : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } ] insecure # The insecure flag [--insecure] is used to indicate that the client wishes to establish an non-TLS enabled gRPC connection. To disable certificate validation in a TLS-enabled connection use skip-verify flag. log # The --log flag enables log messages to appear on stderr output. By default logging is disabled. log-file # The log-file flag [--log-file <path>] sets the log output to a file referenced by the path. This flag supersede the --log flag no-prefix # The no prefix flag [--no-prefix] disables prefixing the json formatted responses with [ip:port] string. Note that in case a single target is specified, the prefix is not added. password # The password flag [-p | --password] is used to specify the target password as part of the user credentials. If omitted, the password input prompt is used to provide the password. Note that in case multiple targets are used, all should use the same credentials. proxy-from-env # The proxy-from-env flag [--proxy-from-env] indicates that the gnmic should use the HTTP/HTTPS proxy addresses defined in the environment variables http_proxy and https_proxy to reach the targets specified using the --address flag. retry # The retry flag `[--retry] specifies the wait time before each retry. Valid formats: 10s, 1m30s, 1h. Defaults to 10s skip-verify # The skip verify flag [--skip-verify] indicates that the target should skip the signature verification steps, in case a secure connection is used. timeout # The timeout flag [--timeout] specifies the gRPC timeout after which the connection attempt fails. Valid formats: 10s, 1m30s, 1h. Defaults to 10s tls-ca # The TLS CA flag [--tls-ca] specifies the root certificates for verifying server certificates encoded in PEM format. tls-cert # The tls cert flag [--tls-cert] specifies the public key for the client encoded in PEM format tls-key # The tls key flag [--tls-key] specifies the private key for the client encoded in PEM format username # The username flag [-u | --username] is used to specify the target username as part of the user credentials. If omitted, the input prompt is used to provide the username.","title":"Global flags"},{"location":"global_flags/#address","text":"The address flag [-a | --address] is used to specify the target's gNMI server address in address:port format, for e.g: 192.168.113.11:57400 Multiple target addresses can be specified, either as comma separated values: gnmic --address 192.168.113.11:57400,192.168.113.12:57400 or by using the --address flag multiple times: gnmic -a 192.168.113.11:57400 --address 192.168.113.12:57400","title":"address"},{"location":"global_flags/#config","text":"The --config flag specifies the location of a configuration file that gnmic will read. Defaults to $HOME/.gnmic.yaml .","title":"config"},{"location":"global_flags/#debug","text":"The debug flag [-d | --debug] enables the printing of extra information when sending/receiving an RPC","title":"debug"},{"location":"global_flags/#encoding","text":"The encoding flag [-e | --encoding] is used to specify the gNMI encoding of the Update part of a Notification message. It is case insensitive and must be one of: JSON, BYTES, PROTO, ASCII, JSON_IETF","title":"encoding"},{"location":"global_flags/#format","text":"Five output formats can be configured by means of the --format flag. [proto, protojson, prototext, json, event] The default format is json . The proto format outputs the gnmi message as raw bytes, this value is not allowed when the output type is file (file system, stdout or stderr) see outputs The prototext and protojson formats are the message representation as defined in prototext and protojson The event format emits the received gNMI SubscribeResponse updates and deletes as a list of events tagged with the keys present in the subscribe path (as well as some metadata) and a timestamp Here goes an example of the same response emitted to stdout in the respective formats: protojson { \"update\" : { \"timestamp\" : \"1595584408456503938\" , \"prefix\" : { \"elem\" : [ { \"name\" : \"state\" }, { \"name\" : \"system\" }, { \"name\" : \"version\" } ] }, \"update\" : [ { \"path\" : { \"elem\" : [ { \"name\" : \"version-string\" } ] }, \"val\" : { \"stringVal\" : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } ] } } prototext update : { timestamp : 1595584168675434221 prefix : { elem : { name : \"state\" } elem : { name : \"system\" } elem : { name : \"version\" } } update : { path : { elem : { name : \"version-string\" } } val : { string_val : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } } json { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"default\" , \"timestamp\" : 1595584326775141151 , \"time\" : \"2020-07-24T17:52:06.775141151+08:00\" , \"prefix\" : \"state/system/version\" , \"updates\" : [ { \"Path\" : \"version-string\" , \"values\" : { \"version-string\" : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } ] } event [ { \"name\" : \"default\" , \"timestamp\" : 1595584587725708234 , \"tags\" : { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/state/system/version/version-string\" : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } ]","title":"format"},{"location":"global_flags/#insecure","text":"The insecure flag [--insecure] is used to indicate that the client wishes to establish an non-TLS enabled gRPC connection. To disable certificate validation in a TLS-enabled connection use skip-verify flag.","title":"insecure"},{"location":"global_flags/#log","text":"The --log flag enables log messages to appear on stderr output. By default logging is disabled.","title":"log"},{"location":"global_flags/#log-file","text":"The log-file flag [--log-file <path>] sets the log output to a file referenced by the path. This flag supersede the --log flag","title":"log-file"},{"location":"global_flags/#no-prefix","text":"The no prefix flag [--no-prefix] disables prefixing the json formatted responses with [ip:port] string. Note that in case a single target is specified, the prefix is not added.","title":"no-prefix"},{"location":"global_flags/#password","text":"The password flag [-p | --password] is used to specify the target password as part of the user credentials. If omitted, the password input prompt is used to provide the password. Note that in case multiple targets are used, all should use the same credentials.","title":"password"},{"location":"global_flags/#proxy-from-env","text":"The proxy-from-env flag [--proxy-from-env] indicates that the gnmic should use the HTTP/HTTPS proxy addresses defined in the environment variables http_proxy and https_proxy to reach the targets specified using the --address flag.","title":"proxy-from-env"},{"location":"global_flags/#retry","text":"The retry flag `[--retry] specifies the wait time before each retry. Valid formats: 10s, 1m30s, 1h. Defaults to 10s","title":"retry"},{"location":"global_flags/#skip-verify","text":"The skip verify flag [--skip-verify] indicates that the target should skip the signature verification steps, in case a secure connection is used.","title":"skip-verify"},{"location":"global_flags/#timeout","text":"The timeout flag [--timeout] specifies the gRPC timeout after which the connection attempt fails. Valid formats: 10s, 1m30s, 1h. Defaults to 10s","title":"timeout"},{"location":"global_flags/#tls-ca","text":"The TLS CA flag [--tls-ca] specifies the root certificates for verifying server certificates encoded in PEM format.","title":"tls-ca"},{"location":"global_flags/#tls-cert","text":"The tls cert flag [--tls-cert] specifies the public key for the client encoded in PEM format","title":"tls-cert"},{"location":"global_flags/#tls-key","text":"The tls key flag [--tls-key] specifies the private key for the client encoded in PEM format","title":"tls-key"},{"location":"global_flags/#username","text":"The username flag [-u | --username] is used to specify the target username as part of the user credentials. If omitted, the input prompt is used to provide the username.","title":"username"},{"location":"install/","text":"gnmic is a single binary built for the Linux, Mac OS and Windows platforms distributed via Github releases . Linux/Mac OS # To download & install the latest release the following automated installation script can be used: sudo curl -sL https://github.com/karimra/gnmic/raw/master/install.sh | sudo bash As a result, the latest gnmic version will be installed in the /usr/local/bin directory and the version information will be printed out. Downloading gnmic_0.0.3_Darwin_x86_64.tar.gz... Moving gnmic to /usr/local/bin version : 0.0.3 commit : f541948 date : 2020-04-23T12:06:07Z gitURL : https://github.com/karimra/gnmic.git docs : https://gnmic.kmrd.dev Installation complete! To upgrade the tool run the installation script once again, it will perform the upgrade if a newer version is available. Windows # It is highly recommended to use WSL on Windows, but if its not possible, use releases page to download the windows executable file. Docker # The gnmic Dockerfile is provided within the repository for a manual build process. Later the ready-made docker image will be part of the release pipeline and you will be able to pull the image from the docker hub. Alternatively you can install gnmic in docker container in an ad-hoc fashion: # launch a docker container based with a libc (debian/rhel) docker run -it centos:7 # install the gnmic sudo curl -sL https://github.com/karimra/gnmic/raw/master/install.sh | sudo bash","title":"Installation"},{"location":"install/#linuxmac-os","text":"To download & install the latest release the following automated installation script can be used: sudo curl -sL https://github.com/karimra/gnmic/raw/master/install.sh | sudo bash As a result, the latest gnmic version will be installed in the /usr/local/bin directory and the version information will be printed out. Downloading gnmic_0.0.3_Darwin_x86_64.tar.gz... Moving gnmic to /usr/local/bin version : 0.0.3 commit : f541948 date : 2020-04-23T12:06:07Z gitURL : https://github.com/karimra/gnmic.git docs : https://gnmic.kmrd.dev Installation complete! To upgrade the tool run the installation script once again, it will perform the upgrade if a newer version is available.","title":"Linux/Mac OS"},{"location":"install/#windows","text":"It is highly recommended to use WSL on Windows, but if its not possible, use releases page to download the windows executable file.","title":"Windows"},{"location":"install/#docker","text":"The gnmic Dockerfile is provided within the repository for a manual build process. Later the ready-made docker image will be part of the release pipeline and you will be able to pull the image from the docker hub. Alternatively you can install gnmic in docker container in an ad-hoc fashion: # launch a docker container based with a libc (debian/rhel) docker run -it centos:7 # install the gnmic sudo curl -sL https://github.com/karimra/gnmic/raw/master/install.sh | sudo bash","title":"Docker"},{"location":"advanced/file_cfg/","text":"gnmic configuration by means of the command line flags is both consistent and reliable. But sometimes its not the best way forward. With lots of configuration options that gnmic supports it might get tedious to pass them all via CLI flags. In cases like that the file-based configuration comes handy. With a configuration file a user can specify all the command line flags by means of a single file. gnmic will read this file and retrieve the configuration options from it. File type, name and location # Configuration file that gnmic reads must be in one of the following formats: JSON, YAML, TOML, HCL or Properties. By default, gnmic will check if the file referenced by $HOME/gnmic.[yml, toml, json] path exists. The default path can be overridden with --config flag. # config file default path is ~/gnmic.[yml, toml, json] gnmic capabilities # read `cfg.yml` file located in the current directory gnmic --config ./cfg.yml capabilities If the file referenced by --config flag is not present, the default path won't be tried. Example of the gnmic config files are provided in the following formats: YAML , JSON , TOML . What options can be in a file? # Configuration file allows a user to specify everything that can be supplied over the CLI and more. Global flags # All of the global flags can be put in a conf file. Consider the following example of a typical configuration file in YAML format: # gNMI target address; CLI flag `--address` address : \"10.0.0.1:57400\" # gNMI target user name; CLI flag `--username` username : admin # gNMI target user password; CLI flag `--password` password : admin # connection mode; CLI flag `--insecure` insecure : true # log file location; CLI flag `--log-file` log-file : /tmp/gnmic.log With such a file located at a default path the gNMI requests can be made in a very short and concise form: # configuration file is read by its default path gnmi capabilities # cfg file has all the global options set, so only the local flags are needed gnmi get --path /configure/system/name Local flags # Local flags have the scope of the command where they have been defined. Local flags can be put in a configuration file as well. To avoid flags names overlap between the different commands a command name should prepend the flag name - <cmd name>-<flag name> . So, for example, we can provide the path flag of a get command in the file by adding the get- prefix to the local flag name: address : \"router.lab:57400\" username : admin password : admin insecure : true get-path : /configure/system/name # `get` command local flag Another example: the update-path flag of a set will be set-update-path in the configuration file. Subscriptions # It is possible to specify multiple subscriptions and associate them with multiple targets in a flexible way. This advanced technique is described in Multiple subscriptions documentation article. Outputs # The other mode gnmic supports (in contrast to CLI) is running as a daemon and exporting the data received with gNMI subscriptions to multiple outputs like stan/nats, kafka, file, etc. Repeated flags # If a flag can appear more than once on the CLI, it can be represented as a list in the file. For example one can set multiple paths for get/set/subscribe operations. In the following example we define multiple paths for the get command to operate on: address : \"router.lab:57400\" username : admin password : admin insecure : true get-path : - /configure/system/name - /state/system/version # it is also possible to use comma separated paths # get-path: /configure/system/name,/state/system/version Options preference # Configuration passed via CLI flags takes precedence over the file config.","title":"File based configuration"},{"location":"advanced/file_cfg/#file-type-name-and-location","text":"Configuration file that gnmic reads must be in one of the following formats: JSON, YAML, TOML, HCL or Properties. By default, gnmic will check if the file referenced by $HOME/gnmic.[yml, toml, json] path exists. The default path can be overridden with --config flag. # config file default path is ~/gnmic.[yml, toml, json] gnmic capabilities # read `cfg.yml` file located in the current directory gnmic --config ./cfg.yml capabilities If the file referenced by --config flag is not present, the default path won't be tried. Example of the gnmic config files are provided in the following formats: YAML , JSON , TOML .","title":"File type, name and location"},{"location":"advanced/file_cfg/#what-options-can-be-in-a-file","text":"Configuration file allows a user to specify everything that can be supplied over the CLI and more.","title":"What options can be in a file?"},{"location":"advanced/file_cfg/#global-flags","text":"All of the global flags can be put in a conf file. Consider the following example of a typical configuration file in YAML format: # gNMI target address; CLI flag `--address` address : \"10.0.0.1:57400\" # gNMI target user name; CLI flag `--username` username : admin # gNMI target user password; CLI flag `--password` password : admin # connection mode; CLI flag `--insecure` insecure : true # log file location; CLI flag `--log-file` log-file : /tmp/gnmic.log With such a file located at a default path the gNMI requests can be made in a very short and concise form: # configuration file is read by its default path gnmi capabilities # cfg file has all the global options set, so only the local flags are needed gnmi get --path /configure/system/name","title":"Global flags"},{"location":"advanced/file_cfg/#local-flags","text":"Local flags have the scope of the command where they have been defined. Local flags can be put in a configuration file as well. To avoid flags names overlap between the different commands a command name should prepend the flag name - <cmd name>-<flag name> . So, for example, we can provide the path flag of a get command in the file by adding the get- prefix to the local flag name: address : \"router.lab:57400\" username : admin password : admin insecure : true get-path : /configure/system/name # `get` command local flag Another example: the update-path flag of a set will be set-update-path in the configuration file.","title":"Local flags"},{"location":"advanced/file_cfg/#subscriptions","text":"It is possible to specify multiple subscriptions and associate them with multiple targets in a flexible way. This advanced technique is described in Multiple subscriptions documentation article.","title":"Subscriptions"},{"location":"advanced/file_cfg/#outputs","text":"The other mode gnmic supports (in contrast to CLI) is running as a daemon and exporting the data received with gNMI subscriptions to multiple outputs like stan/nats, kafka, file, etc.","title":"Outputs"},{"location":"advanced/file_cfg/#repeated-flags","text":"If a flag can appear more than once on the CLI, it can be represented as a list in the file. For example one can set multiple paths for get/set/subscribe operations. In the following example we define multiple paths for the get command to operate on: address : \"router.lab:57400\" username : admin password : admin insecure : true get-path : - /configure/system/name - /state/system/version # it is also possible to use comma separated paths # get-path: /configure/system/name,/state/system/version","title":"Repeated flags"},{"location":"advanced/file_cfg/#options-preference","text":"Configuration passed via CLI flags takes precedence over the file config.","title":"Options preference"},{"location":"advanced/multi_target/","text":"Sometimes it is needed to perform an operation on multiple devices; be it getting the same leaf value from a given set of the network elements or setting a certain configuration element to some value. For cases like that gnmic offers support for multiple targets operations which a user can configure both via CLI flags as well as with the file-based configuration . CLI configuration # Specifying multiple targets in the CLI is as easy as repeating the --address flag. \u276f gnmic -a router1.lab.net:57400 \\ -a router2.lab.net:57400 \\ get --path /configure/system/name File-based configuration # With the file-based configuration a user has two options to specify multiple targets: using address option using targets option address option # With address option the user must provide a list of addresses. In the YAML format that would look like that: address : - \"router1.lab.net:57400\" - \"router2.lab.net:57400\" The limitation this approach has is that it is impossible to set different credentials for the targets, they will essentially share the credentials specified in a file or via flags. target option # With the targets option it is possible to set target specific options (such as credentials, subscriptions, TLS config, outputs), and thus this option is recommended to use: targets : router1.lab.net : timeout : 2s username : r1 password : gnmi_pass router2.lab.net:57000 : username : r2 password : gnmi_pass tls-key : /path/file1 tls-cert : /path/file2 The target address is defined as the key under the targets section of the configuration file. The default port (57400) can be omitted as demonstrated with router1.lab.net target address. Have a look at the file-based targets configuration example to get a glimpse of what it is capable of. The target inherits the globally defined options if the matching options are not set on a target level. For example, if a target doesn't have a username defined, it will use the username value set on a global level. Target supported options: targets : target1 : name : address : username : password : timeout : insecure : tls-ca : tls-cert : tls-key : skip-verify : subscriptions : outputs : buffer-size : retry : Example # Whatever configuration option you choose, the multi-targeted operations will uniformly work across the commands that support them. Consider the get command acting on two routers getting their names: \u276f gnmic -a router1.lab.net:57400 \\ -a router2.lab.net:57400 \\ get --path /configure/system/name [router1.lab.net:57400] { [router1.lab.net:57400] \"source\": \"router1.lab.net:57400\", [router1.lab.net:57400] \"timestamp\": 1593009759618786781, [router1.lab.net:57400] \"time\": \"2020-06-24T16:42:39.618786781+02:00\", [router1.lab.net:57400] \"updates\": [ [router1.lab.net:57400] { [router1.lab.net:57400] \"Path\": \"configure/system/name\", [router1.lab.net:57400] \"values\": { [router1.lab.net:57400] \"configure/system/name\": \"gnmic_r1\" [router1.lab.net:57400] } [router1.lab.net:57400] } [router1.lab.net:57400] ] [router1.lab.net:57400] } [router2.lab.net:57400] { [router2.lab.net:57400] \"source\": \"router2.lab.net:57400\", [router2.lab.net:57400] \"timestamp\": 1593009759748265232, [router2.lab.net:57400] \"time\": \"2020-06-24T16:42:39.748265232+02:00\", [router2.lab.net:57400] \"updates\": [ [router2.lab.net:57400] { [router2.lab.net:57400] \"Path\": \"configure/system/name\", [router2.lab.net:57400] \"values\": { [router2.lab.net:57400] \"configure/system/name\": \"gnmic_r2\" [router2.lab.net:57400] } [router2.lab.net:57400] } [router2.lab.net:57400] ] [router2.lab.net:57400] } Notice how in the output the different gNMI targets are prefixed with the target address to make the output easy to read. If those prefixes are not needed, you can make them disappear with --no-prefix global flag.","title":"Multiple targets"},{"location":"advanced/multi_target/#cli-configuration","text":"Specifying multiple targets in the CLI is as easy as repeating the --address flag. \u276f gnmic -a router1.lab.net:57400 \\ -a router2.lab.net:57400 \\ get --path /configure/system/name","title":"CLI configuration"},{"location":"advanced/multi_target/#file-based-configuration","text":"With the file-based configuration a user has two options to specify multiple targets: using address option using targets option","title":"File-based configuration"},{"location":"advanced/multi_target/#address-option","text":"With address option the user must provide a list of addresses. In the YAML format that would look like that: address : - \"router1.lab.net:57400\" - \"router2.lab.net:57400\" The limitation this approach has is that it is impossible to set different credentials for the targets, they will essentially share the credentials specified in a file or via flags.","title":"address option"},{"location":"advanced/multi_target/#target-option","text":"With the targets option it is possible to set target specific options (such as credentials, subscriptions, TLS config, outputs), and thus this option is recommended to use: targets : router1.lab.net : timeout : 2s username : r1 password : gnmi_pass router2.lab.net:57000 : username : r2 password : gnmi_pass tls-key : /path/file1 tls-cert : /path/file2 The target address is defined as the key under the targets section of the configuration file. The default port (57400) can be omitted as demonstrated with router1.lab.net target address. Have a look at the file-based targets configuration example to get a glimpse of what it is capable of. The target inherits the globally defined options if the matching options are not set on a target level. For example, if a target doesn't have a username defined, it will use the username value set on a global level. Target supported options: targets : target1 : name : address : username : password : timeout : insecure : tls-ca : tls-cert : tls-key : skip-verify : subscriptions : outputs : buffer-size : retry :","title":"target option"},{"location":"advanced/multi_target/#example","text":"Whatever configuration option you choose, the multi-targeted operations will uniformly work across the commands that support them. Consider the get command acting on two routers getting their names: \u276f gnmic -a router1.lab.net:57400 \\ -a router2.lab.net:57400 \\ get --path /configure/system/name [router1.lab.net:57400] { [router1.lab.net:57400] \"source\": \"router1.lab.net:57400\", [router1.lab.net:57400] \"timestamp\": 1593009759618786781, [router1.lab.net:57400] \"time\": \"2020-06-24T16:42:39.618786781+02:00\", [router1.lab.net:57400] \"updates\": [ [router1.lab.net:57400] { [router1.lab.net:57400] \"Path\": \"configure/system/name\", [router1.lab.net:57400] \"values\": { [router1.lab.net:57400] \"configure/system/name\": \"gnmic_r1\" [router1.lab.net:57400] } [router1.lab.net:57400] } [router1.lab.net:57400] ] [router1.lab.net:57400] } [router2.lab.net:57400] { [router2.lab.net:57400] \"source\": \"router2.lab.net:57400\", [router2.lab.net:57400] \"timestamp\": 1593009759748265232, [router2.lab.net:57400] \"time\": \"2020-06-24T16:42:39.748265232+02:00\", [router2.lab.net:57400] \"updates\": [ [router2.lab.net:57400] { [router2.lab.net:57400] \"Path\": \"configure/system/name\", [router2.lab.net:57400] \"values\": { [router2.lab.net:57400] \"configure/system/name\": \"gnmic_r2\" [router2.lab.net:57400] } [router2.lab.net:57400] } [router2.lab.net:57400] ] [router2.lab.net:57400] } Notice how in the output the different gNMI targets are prefixed with the target address to make the output easy to read. If those prefixes are not needed, you can make them disappear with --no-prefix global flag.","title":"Example"},{"location":"advanced/subscriptions/","text":"Defining subscriptions with subscribe command's CLI flags is a quick&easy way to work with gNMI subscriptions. A downside of that approach though is that its not flexible enough. With the multiple subscriptions defined in the configuration file we make a complex task of managing multiple subscriptions for multiple targets easy. The idea behind the multiple subscriptions is to define the subscriptions separately and then bind them to the targets. Defining subscriptions # To define a subscription a user needs to create the subscriptions container in the configuration file: # part of ~/gnmic.yml config file subscriptions : # container for subscriptions port_stats : # a named subscription, a key is a name paths : # list of subscription paths for that named subscription - \"/state/port[port-id=1/1/c1/1]/statistics/out-octets\" - \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" stream-mode : sample # one of [on-change target-defined sample] sample-interval : 5s encoding : bytes service_state : paths : - \"/state/service/vpls[service-name=*]/oper-state\" - \"/state/service/vprn[service-name=*]/oper-state\" stream-mode : on-change system_facts : paths : - \"/configure/system/name\" - \"/state/system/version\" mode : once Inside that subscriptions container a user defines individual named subscriptions; in the example above two named subscriptions port_stats and service_state were defined. Each subscription is independent and fully configurable. The following list of configuration options is available: prefix target paths models mode stream-mode encoding qos sample-interval heartbeat-interval suppress-redundant updates-only These subscriptions can be used on the cli via the [ --name ] flag of subscribe command: gnmic subscribe --name service_state --name port_stats Or by binding them to different targets, (see next section) Binding subscriptions # Once the subscriptions are defined, they can be flexibly associated with the targets. # part of ~/gnmic.yml config file targets : router1.lab.com : username : admin password : secret subscriptions : - port_stats - service_state router2.lab.com : username : gnmi password : telemetry subscriptions : - service_state The named subscriptions are put under the subscriptions section of a target container. As shown in the example above, it is allowed to add multiple named subscriptions under a single target; in that case each named subscription will result in a separate Subscription Request towards a target. Note If a target is not explicitely associated with any subscription, the client will subscribe to all defined subscriptions in the file. The full configuration with the subscriptions defined and associated with targets will look like this: targets : router1.lab.com : subscriptions : - port_stats - service_state - system_facts router2.lab.com : subscriptions : - service_state - system_facts username : admin password : nokiasr0s insecure : true subscriptions : port_stats : paths : - \"/state/port[port-id=1/1/c1/1]/statistics/out-octets\" - \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" stream-mode : sample sample-interval : 5s encoding : bytes service_state : paths : - \"/state/service/vpls[service-name=*]/oper-state\" - \"/state/service/vprn[service-name=*]/oper-state\" stream-mode : on-change system_facts : paths : - \"/configure/system/name\" - \"/state/system/version\" mode : once As a result of such configuration the gnmic will set up three gNMI subscriptions to router1 and two other gNMI subscriptions to router2: $ gnmic subscribe gnmic 2020/07/06 22:03:35.579942 target 'router2.lab.com' initialized gnmic 2020/07/06 22:03:35.593082 target 'router1.lab.com' initialized { \"source\" : \"router2.lab.com\" , \"subscription-name\" : \"service_state\" , \"timestamp\" : 1594065869313065895 , \"time\" : \"2020-07-06T22:04:29.313065895+02:00\" , \"prefix\" : \"state/service/vpls[service-name=testvpls]\" , \"updates\" : [ { \"Path\" : \"oper-state\" , \"values\" : { \"oper-state\" : \"down\" } } ] } { \"source\" : \"router1.lab.com\" , \"subscription-name\" : \"service_state\" , \"timestamp\" : 1594065868850351364 , \"time\" : \"2020-07-06T22:04:28.850351364+02:00\" , \"prefix\" : \"state/service/vpls[service-name=test]\" , \"updates\" : [ { \"Path\" : \"oper-state\" , \"values\" : { \"oper-state\" : \"down\" } } ] } { \"source\" : \"router1.lab.com\" , \"subscription-name\" : \"port_stats\" , \"timestamp\" : 1594065873938155916 , \"time\" : \"2020-07-06T22:04:33.938155916+02:00\" , \"prefix\" : \"state/port[port-id=1/1/c1/1]/statistics\" , \"updates\" : [ { \"Path\" : \"in-octets\" , \"values\" : { \"in-octets\" : \"671552\" } } ] } { \"source\" : \"router1.lab.com\" , \"subscription-name\" : \"port_stats\" , \"timestamp\" : 1594065873938043848 , \"time\" : \"2020-07-06T22:04:33.938043848+02:00\" , \"prefix\" : \"state/port[port-id=1/1/c1/1]/statistics\" , \"updates\" : [ { \"Path\" : \"out-octets\" , \"values\" : { \"out-octets\" : \"370930\" } } ] } ^C received signal 'interrupt'. terminating...","title":"Multiple subscriptions"},{"location":"advanced/subscriptions/#defining-subscriptions","text":"To define a subscription a user needs to create the subscriptions container in the configuration file: # part of ~/gnmic.yml config file subscriptions : # container for subscriptions port_stats : # a named subscription, a key is a name paths : # list of subscription paths for that named subscription - \"/state/port[port-id=1/1/c1/1]/statistics/out-octets\" - \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" stream-mode : sample # one of [on-change target-defined sample] sample-interval : 5s encoding : bytes service_state : paths : - \"/state/service/vpls[service-name=*]/oper-state\" - \"/state/service/vprn[service-name=*]/oper-state\" stream-mode : on-change system_facts : paths : - \"/configure/system/name\" - \"/state/system/version\" mode : once Inside that subscriptions container a user defines individual named subscriptions; in the example above two named subscriptions port_stats and service_state were defined. Each subscription is independent and fully configurable. The following list of configuration options is available: prefix target paths models mode stream-mode encoding qos sample-interval heartbeat-interval suppress-redundant updates-only These subscriptions can be used on the cli via the [ --name ] flag of subscribe command: gnmic subscribe --name service_state --name port_stats Or by binding them to different targets, (see next section)","title":"Defining subscriptions"},{"location":"advanced/subscriptions/#binding-subscriptions","text":"Once the subscriptions are defined, they can be flexibly associated with the targets. # part of ~/gnmic.yml config file targets : router1.lab.com : username : admin password : secret subscriptions : - port_stats - service_state router2.lab.com : username : gnmi password : telemetry subscriptions : - service_state The named subscriptions are put under the subscriptions section of a target container. As shown in the example above, it is allowed to add multiple named subscriptions under a single target; in that case each named subscription will result in a separate Subscription Request towards a target. Note If a target is not explicitely associated with any subscription, the client will subscribe to all defined subscriptions in the file. The full configuration with the subscriptions defined and associated with targets will look like this: targets : router1.lab.com : subscriptions : - port_stats - service_state - system_facts router2.lab.com : subscriptions : - service_state - system_facts username : admin password : nokiasr0s insecure : true subscriptions : port_stats : paths : - \"/state/port[port-id=1/1/c1/1]/statistics/out-octets\" - \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" stream-mode : sample sample-interval : 5s encoding : bytes service_state : paths : - \"/state/service/vpls[service-name=*]/oper-state\" - \"/state/service/vprn[service-name=*]/oper-state\" stream-mode : on-change system_facts : paths : - \"/configure/system/name\" - \"/state/system/version\" mode : once As a result of such configuration the gnmic will set up three gNMI subscriptions to router1 and two other gNMI subscriptions to router2: $ gnmic subscribe gnmic 2020/07/06 22:03:35.579942 target 'router2.lab.com' initialized gnmic 2020/07/06 22:03:35.593082 target 'router1.lab.com' initialized { \"source\" : \"router2.lab.com\" , \"subscription-name\" : \"service_state\" , \"timestamp\" : 1594065869313065895 , \"time\" : \"2020-07-06T22:04:29.313065895+02:00\" , \"prefix\" : \"state/service/vpls[service-name=testvpls]\" , \"updates\" : [ { \"Path\" : \"oper-state\" , \"values\" : { \"oper-state\" : \"down\" } } ] } { \"source\" : \"router1.lab.com\" , \"subscription-name\" : \"service_state\" , \"timestamp\" : 1594065868850351364 , \"time\" : \"2020-07-06T22:04:28.850351364+02:00\" , \"prefix\" : \"state/service/vpls[service-name=test]\" , \"updates\" : [ { \"Path\" : \"oper-state\" , \"values\" : { \"oper-state\" : \"down\" } } ] } { \"source\" : \"router1.lab.com\" , \"subscription-name\" : \"port_stats\" , \"timestamp\" : 1594065873938155916 , \"time\" : \"2020-07-06T22:04:33.938155916+02:00\" , \"prefix\" : \"state/port[port-id=1/1/c1/1]/statistics\" , \"updates\" : [ { \"Path\" : \"in-octets\" , \"values\" : { \"in-octets\" : \"671552\" } } ] } { \"source\" : \"router1.lab.com\" , \"subscription-name\" : \"port_stats\" , \"timestamp\" : 1594065873938043848 , \"time\" : \"2020-07-06T22:04:33.938043848+02:00\" , \"prefix\" : \"state/port[port-id=1/1/c1/1]/statistics\" , \"updates\" : [ { \"Path\" : \"out-octets\" , \"values\" : { \"out-octets\" : \"370930\" } } ] } ^C received signal 'interrupt'. terminating...","title":"Binding subscriptions"},{"location":"advanced/multi_outputs/file_output/","text":"gnmic supports exporting subscription updates to multiple local files A file output can be defined using the below format in gnmic config file under outputs section: outputs : group1 : - type : file # required file-name : /path/to/filename file-type : stdout # or stderr The file output can be used to write to file on the disk, to stdout or to stderr. For a disk file, a file name is required. For stdout or stderr, only file-type is required.","title":"File"},{"location":"advanced/multi_outputs/kafka_output/","text":"gnmic supports exporting subscription updates to multiple Apache Kafka brokers/clusters simultaneously A Kafka output can be defined using the below format in gnmic config file under outputs section: outputs : group1 : - type : kafka # required address : localhost:9092 # comma separated brokers addresses topic : telemetry # topic name max-retry : # max number of retries retry timeout : # kafka connection timeout Currently all subscriptions updates (all targets and all subscriptions) are published to the defined topic name","title":"Kafka"},{"location":"advanced/multi_outputs/nats_output/","text":"gnmic supports exporting subscription updates to multiple NATS servers/clusters simultaneously A NATS output can be defined using the below format in gnmic config file under outputs section: outputs : group1 : - type : nats # required address : localhost:4222 # comma separated NATS servers subject-prefix : telemetry # this prefix is used to to build the subject name for each target/subscription subject : telemetry # if a subject-prefix is not specified, gnmic will publish all subscriptions updates to a single subject 'telemetry' username : # NATS username password : # NATS password connect-time-wait : # wait time before reconnection attempts Using subject config value a user can specify the NATS subject to which to send all subscriptions updates for all targets If a user wants to separate updates by targets and by subscriptions, subject-prefix can be used. if subject-prefix is specified subject is ignored. gnmic takes advantage of NATS subject hierarchy by publishing gNMI subscription updates to a separate subject per target per subscription. The NATS subject name is built out of the subject-prefix , name under the target definition and subscription-name resulting in the following format: subject-prefix.name.subscription-name e.g: for a target router1 , a subscription name port-stats and subject-prefix telemetry the subject name will be telemetry.router1.port-stats If the target name is an IP address, or a hostname (meaning potentially contains . ), the . characters are replaced with a - e.g: for a target 172.17.0.100:57400 , the previous subject name becomes telemetry.172-17-0-100:57400.port-stats This way a user can subscribe to different subsets of updates by tweaking the subject name: \"telemetry.>\" gets all updates sent to NATS by all targets, all subscriptions \"telemetry.router1.>\" gets all NATS updates for target router1 \"telemetry.*.port-stats\" gets all updates from subscription port-stats, for all targets","title":"NATS"},{"location":"advanced/multi_outputs/output_intro/","text":"In the context of gnmi subscriptions (on top of terminal output) gnmic supports multiple output options: Local file NATS messaging system NATS Streaming messaging bus (STAN) Kafka messaging bus These outputs can be mixed and matched at will with the different gnmi subscribe targets. With multiple outputs defined in the configuration file you can collect once and export the subscriptions updates to multiple locations formatted differently. Defining outputs # To define an output a user needs to create the outputs section in the configuration file: # part of ~/gnmic.yml config file outputs : group1 : - type : file # output type file-type : stdout # or stderr format : json - type : file filename : /path/to/localFile.log format : protojson group2 : - type : nats # output type address : 127.0.0.1:4222 # comma separated nats servers addresses subject-prefix : telemetry # format : event - type : file filename : /path/to/localFile.log format : json group3 : - type : stan # output type address : 127.0.0.1:4223 # comma separated nats streaming servers addresses subject : telemetry # cluster-name : test-cluster # format : proto group4 : - type : kafka # output type address : localhost:9092 # comma separated kafka brokers addresses topic : telemetry # kafka topic format : proto - type : stan # output type address : 127.0.0.1:4223 # comma separated nats streaming servers addresses subject : telemetry cluster-name : test-cluster Outputs can be defined in groups to be able to match a target with multiple outputs at once, Output formats # Different formats are supported for all outputs Format/output File NATS / STAN Kafka proto protojson prototext json (default) event Formats examples # protojson { \"update\" : { \"timestamp\" : \"1595491618677407414\" , \"prefix\" : { \"elem\" : [ { \"name\" : \"configure\" }, { \"name\" : \"system\" } ] }, \"update\" : [ { \"path\" : { \"elem\" : [ { \"name\" : \"name\" } ] }, \"val\" : { \"stringVal\" : \"sr123\" } } ] } } prototext update : { timestamp : 1595491704850352047 prefix : { elem : { name : \"configure\" } elem : { name : \"system\" } } update : { path : { elem : { name : \"name\" } } val : { string_val : \"sr123\" } } } json { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"sub1\" , \"timestamp\" : 1595491557144228652 , \"time\" : \"2020-07-23T16:05:57.144228652+08:00\" , \"prefix\" : \"configure/system\" , \"updates\" : [ { \"Path\" : \"name\" , \"values\" : { \"name\" : \"sr123\" } } ] } event [ { \"name\" : \"sub1\" , \"timestamp\" : 1595491586073072000 , \"tags\" : { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"sub1\" }, \"values\" : { \"/configure/system/name\" : \"sr123\" } } ] Binding outputs # Once the outputs are defined, they can be flexibly associated with the targets. # part of ~/gnmic.yml config file targets : router1.lab.com : username : admin password : secret outputs : - group1 - group3 router2.lab.com : username : gnmi password : telemetry outputs : - group2 - group3 - group4","title":"Introduction"},{"location":"advanced/multi_outputs/output_intro/#defining-outputs","text":"To define an output a user needs to create the outputs section in the configuration file: # part of ~/gnmic.yml config file outputs : group1 : - type : file # output type file-type : stdout # or stderr format : json - type : file filename : /path/to/localFile.log format : protojson group2 : - type : nats # output type address : 127.0.0.1:4222 # comma separated nats servers addresses subject-prefix : telemetry # format : event - type : file filename : /path/to/localFile.log format : json group3 : - type : stan # output type address : 127.0.0.1:4223 # comma separated nats streaming servers addresses subject : telemetry # cluster-name : test-cluster # format : proto group4 : - type : kafka # output type address : localhost:9092 # comma separated kafka brokers addresses topic : telemetry # kafka topic format : proto - type : stan # output type address : 127.0.0.1:4223 # comma separated nats streaming servers addresses subject : telemetry cluster-name : test-cluster Outputs can be defined in groups to be able to match a target with multiple outputs at once,","title":"Defining outputs"},{"location":"advanced/multi_outputs/output_intro/#output-formats","text":"Different formats are supported for all outputs Format/output File NATS / STAN Kafka proto protojson prototext json (default) event","title":"Output formats"},{"location":"advanced/multi_outputs/output_intro/#formats-examples","text":"protojson { \"update\" : { \"timestamp\" : \"1595491618677407414\" , \"prefix\" : { \"elem\" : [ { \"name\" : \"configure\" }, { \"name\" : \"system\" } ] }, \"update\" : [ { \"path\" : { \"elem\" : [ { \"name\" : \"name\" } ] }, \"val\" : { \"stringVal\" : \"sr123\" } } ] } } prototext update : { timestamp : 1595491704850352047 prefix : { elem : { name : \"configure\" } elem : { name : \"system\" } } update : { path : { elem : { name : \"name\" } } val : { string_val : \"sr123\" } } } json { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"sub1\" , \"timestamp\" : 1595491557144228652 , \"time\" : \"2020-07-23T16:05:57.144228652+08:00\" , \"prefix\" : \"configure/system\" , \"updates\" : [ { \"Path\" : \"name\" , \"values\" : { \"name\" : \"sr123\" } } ] } event [ { \"name\" : \"sub1\" , \"timestamp\" : 1595491586073072000 , \"tags\" : { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"sub1\" }, \"values\" : { \"/configure/system/name\" : \"sr123\" } } ]","title":"Formats examples"},{"location":"advanced/multi_outputs/output_intro/#binding-outputs","text":"Once the outputs are defined, they can be flexibly associated with the targets. # part of ~/gnmic.yml config file targets : router1.lab.com : username : admin password : secret outputs : - group1 - group3 router2.lab.com : username : gnmi password : telemetry outputs : - group2 - group3 - group4","title":"Binding outputs"},{"location":"advanced/multi_outputs/stan_output/","text":"gnmic supports exporting subscription updates to multiple NATS Streaming (STAN) servers/clusters simultaneously A STAN output can be defined using the below format in gnmic config file under outputs section: outputs : group1 : - type : stan # required address : localhost:4223 # comma separated STAN servers subject : telemetry # stan subject subject-prefix : telemetry # stan subject prefix, the subject prefix is built the same way as for NATS output username : # STAN username password : # STAN password name : # client name cluster-name : test-cluster # cluster name timeout : # connection timeout ping-interval : # STAN ping interval ping-retry : # STAN ping retry Using subject config value a user can specify the STAN subject to which to send all subscriptions updates for all targets If a user wants to separate updates by targets and by subscriptions, subject-prefix can be used. if subject-prefix is specified subject is ignored.","title":"STAN"},{"location":"cmd/capabilities/","text":"Description # The [cap | capabilities] command represents the gNMI Capabilities RPC . It is used to send a Capability Request to the specified target(s) and expects one Capability Response per target. Capabilities allows the client to retrieve the set of capabilities that is supported by the target: gNMI version available data models supported encodings gNMI extensions This allows the client to, for example, validate the service version that is implemented and retrieve the set of models that the target supports. The models can then be specified in subsequent Get/Subscribe RPCs to precisely tell the target which models to use. Usage # gnmic [global-flags] capabilities [local-flags] Examples # single host # gnmic -a <ip:port> --username <user> --password <password> \\ --insecure capabilities gNMI_Version: 0.7.0 supported models: - nokia-conf, Nokia, 19.10.R2 - nokia-state, Nokia, 19.10.R2 - nokia-li-state, Nokia, 19.10.R2 - nokia-li-conf, Nokia, 19.10.R2 << SNIPPED >> supported encodings: - JSON - BYTES multiple hosts # gnmic -a <ip:port>,<ip:port> -u <user> -p <password> \\ --insecure cap","title":"Capabilities"},{"location":"cmd/capabilities/#description","text":"The [cap | capabilities] command represents the gNMI Capabilities RPC . It is used to send a Capability Request to the specified target(s) and expects one Capability Response per target. Capabilities allows the client to retrieve the set of capabilities that is supported by the target: gNMI version available data models supported encodings gNMI extensions This allows the client to, for example, validate the service version that is implemented and retrieve the set of models that the target supports. The models can then be specified in subsequent Get/Subscribe RPCs to precisely tell the target which models to use.","title":"Description"},{"location":"cmd/capabilities/#usage","text":"gnmic [global-flags] capabilities [local-flags]","title":"Usage"},{"location":"cmd/capabilities/#examples","text":"","title":"Examples"},{"location":"cmd/capabilities/#single-host","text":"gnmic -a <ip:port> --username <user> --password <password> \\ --insecure capabilities gNMI_Version: 0.7.0 supported models: - nokia-conf, Nokia, 19.10.R2 - nokia-state, Nokia, 19.10.R2 - nokia-li-state, Nokia, 19.10.R2 - nokia-li-conf, Nokia, 19.10.R2 << SNIPPED >> supported encodings: - JSON - BYTES","title":"single host"},{"location":"cmd/capabilities/#multiple-hosts","text":"gnmic -a <ip:port>,<ip:port> -u <user> -p <password> \\ --insecure cap","title":"multiple hosts"},{"location":"cmd/get/","text":"Description # The get command represents the gNMI Get RPC . It is used to send a GetRequest to the specified target(s) (using the global flag --address and expects one GetResponse per target, per path. The Get RPC is used to retrieve a snapshot of data from the target. It requests that the target snapshots a subset of the data tree as specified by the paths included in the message and serializes this to be returned to the client using the specified encoding. Usage # gnmic [global-flags] get [local-flags] Flags # prefix # As per path prefixes , the prefix [--prefix] flag represents a common prefix that is applied to all paths specified using the local --path flag. Defaults to \"\" . path # The mandatory path flag [--path] is used to specify the path(s) the client wants to receive a snapshot of. Multiple paths can be specified, either as a comma separated string: gnmic -a <ip:port> --insecure \\ get --path \"/state/port[port-id=*],\\ /state/router[router-name=*]/interface[interface-name=*]\" Or by using multiple --path flags: gnmic -a <ip:port> --insecure \\ get --path \"/state/ports[port-id=*]\" \\ --path \"/state/router[router-name=*]/interface[interface-name=*]\" If a user needs to provide origin information to the Path message, the following pattern should be used for the path string: \"origin:path\" : gnmic -a <ip:port> --insecure \\ get --path \"openconfig-interfaces:interfaces/interface\" model # The optional model flag [--model] is used to specify the schema definition modules that the target should use when returning a GetResponse. The model name should match the names returned in Capabilities RPC. Currently only single model name is supported. target # With the optional [--target] flag it is possible to supply the path target information in the prefix field of the GetRequest message. type # The type flag [--type] is used to specify the data type requested from the server. One of: ALL, CONFIG, STATE, OPERATIONAL (defaults to \"ALL\") Examples # # simple Get RPC gnmic -a <ip:port> get --path \"/state/port[port-id=*]\" # Get RPC with multiple paths gnmic -a <ip:port> get --path \"/state/port[port-id=*]\" \\ --path \"/state/router[router-name=*]/interface[interface-name=*]\" # Get RPC with path prefix gnmic -a <ip:port> get --prefix \"/state\" \\ --path \"port[port-id=*]\" \\ --path \"router[router-name=*]/interface[interface-name=*]\"","title":"Get"},{"location":"cmd/get/#description","text":"The get command represents the gNMI Get RPC . It is used to send a GetRequest to the specified target(s) (using the global flag --address and expects one GetResponse per target, per path. The Get RPC is used to retrieve a snapshot of data from the target. It requests that the target snapshots a subset of the data tree as specified by the paths included in the message and serializes this to be returned to the client using the specified encoding.","title":"Description"},{"location":"cmd/get/#usage","text":"gnmic [global-flags] get [local-flags]","title":"Usage"},{"location":"cmd/get/#flags","text":"","title":"Flags"},{"location":"cmd/get/#prefix","text":"As per path prefixes , the prefix [--prefix] flag represents a common prefix that is applied to all paths specified using the local --path flag. Defaults to \"\" .","title":"prefix"},{"location":"cmd/get/#path","text":"The mandatory path flag [--path] is used to specify the path(s) the client wants to receive a snapshot of. Multiple paths can be specified, either as a comma separated string: gnmic -a <ip:port> --insecure \\ get --path \"/state/port[port-id=*],\\ /state/router[router-name=*]/interface[interface-name=*]\" Or by using multiple --path flags: gnmic -a <ip:port> --insecure \\ get --path \"/state/ports[port-id=*]\" \\ --path \"/state/router[router-name=*]/interface[interface-name=*]\" If a user needs to provide origin information to the Path message, the following pattern should be used for the path string: \"origin:path\" : gnmic -a <ip:port> --insecure \\ get --path \"openconfig-interfaces:interfaces/interface\"","title":"path"},{"location":"cmd/get/#model","text":"The optional model flag [--model] is used to specify the schema definition modules that the target should use when returning a GetResponse. The model name should match the names returned in Capabilities RPC. Currently only single model name is supported.","title":"model"},{"location":"cmd/get/#target","text":"With the optional [--target] flag it is possible to supply the path target information in the prefix field of the GetRequest message.","title":"target"},{"location":"cmd/get/#type","text":"The type flag [--type] is used to specify the data type requested from the server. One of: ALL, CONFIG, STATE, OPERATIONAL (defaults to \"ALL\")","title":"type"},{"location":"cmd/get/#examples","text":"# simple Get RPC gnmic -a <ip:port> get --path \"/state/port[port-id=*]\" # Get RPC with multiple paths gnmic -a <ip:port> get --path \"/state/port[port-id=*]\" \\ --path \"/state/router[router-name=*]/interface[interface-name=*]\" # Get RPC with path prefix gnmic -a <ip:port> get --prefix \"/state\" \\ --path \"port[port-id=*]\" \\ --path \"router[router-name=*]/interface[interface-name=*]\"","title":"Examples"},{"location":"cmd/listen/","text":"Description # gnmic can be used in a \"dial-out telemetry\" mode by means of the listen command. In the dial-out mode: a network element is configured with the telemetry paths a network element initiates a connection towards the server/collector ( gnmic acts as a server in that case) Info Currently gnmic only implements the dial-out support for Nokia 1 SR OS 20.5.r1+ routers. Usage # gnmic listen [global flags] [local flags] Flags # address # The address flag [-a | --address] tells gnmic which address to bind an internal server to in an address:port format, e.g.: 0.0.0.0:57400 . tls-cert # Path to the TLS certificate can be supplied with --tls-cert flag. tls-key # Path to the private key can be supplied with --tls-key flag. max-concurrent-streams # To limit the maximum number of concurrent HTTP2 streams use the --max-concurrent-streams flag, the default value is 256. Examples # TLS disabled server # To start gnmic as a server listening on all interfaces without TLS support is as simple as: gnmic listen -a 0.0.0.0:57400 SR OS configuration for non TLS dialout connections /configure system telemetry destination-group \"dialout\" allow-unsecure-connection /configure system telemetry destination-group \"dialout\" destination 10.2.0.99 port 57400 router-instance \"management\" /configure system telemetry persistent-subscriptions { } /configure system telemetry persistent-subscriptions subscription \"dialout\" admin-state enable /configure system telemetry persistent-subscriptions subscription \"dialout\" sensor-group \"port_stats\" /configure system telemetry persistent-subscriptions subscription \"dialout\" mode sample /configure system telemetry persistent-subscriptions subscription \"dialout\" sample-interval 1000 /configure system telemetry persistent-subscriptions subscription \"dialout\" destination-group \"dialout\" /configure system telemetry persistent-subscriptions subscription \"dialout\" encoding bytes /configure system telemetry sensor-groups { } /configure system telemetry sensor-groups { sensor-group \"port_stats\" } /configure system telemetry sensor-groups { sensor-group \"port_stats\" path \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" } TLS enabled server # By using tls-cert and tls-key flags it is possible to run gnmic with TLS. gnmic listen -a 0.0.0.0:57400 --tls-cert gnmic.pem --tls-key gnmic-key.pem SR OS configuration for a TLS enabled dialout connections The configuration below does not utilise router-side certificates and uses the certificate provided by the server (gnmic). The router will also not verify the certificate. /configure system telemetry destination-group \"dialout\" tls-client-profile \"client-tls\" /configure system telemetry destination-group \"dialout\" destination 10.2.0.99 port 57400 router-instance \"management\" /configure system telemetry persistent-subscriptions { } /configure system telemetry persistent-subscriptions subscription \"dialout\" admin-state enable /configure system telemetry persistent-subscriptions subscription \"dialout\" sensor-group \"port_stats\" /configure system telemetry persistent-subscriptions subscription \"dialout\" mode sample /configure system telemetry persistent-subscriptions subscription \"dialout\" sample-interval 1000 /configure system telemetry persistent-subscriptions subscription \"dialout\" destination-group \"dialout\" /configure system telemetry persistent-subscriptions subscription \"dialout\" encoding bytes /configure system telemetry sensor-groups { } /configure system telemetry sensor-groups { sensor-group \"port_stats\" } /configure system telemetry sensor-groups { sensor-group \"port_stats\" path \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" } /configure system security tls client-cipher-list \"client-ciphers\" { } /configure system security tls client-cipher-list \"client-ciphers\" cipher 1 name tls-rsa-with-aes128-cbc-sha /configure system security tls client-cipher-list \"client-ciphers\" cipher 2 name tls-rsa-with-aes128-cbc-sha256 /configure system security tls client-cipher-list \"client-ciphers\" cipher 3 name tls-rsa-with-aes256-cbc-sha /configure system security tls client-cipher-list \"client-ciphers\" cipher 4 name tls-rsa-with-aes256-cbc-sha256 /configure system security tls client-tls-profile \"client-tls\" admin-state enable /configure system security tls client-tls-profile \"client-tls\" cipher-list \"client-ciphers\" Nokia dial-out proto definition can be found in karimra/sros-dialout \u21a9","title":"Listen"},{"location":"cmd/listen/#description","text":"gnmic can be used in a \"dial-out telemetry\" mode by means of the listen command. In the dial-out mode: a network element is configured with the telemetry paths a network element initiates a connection towards the server/collector ( gnmic acts as a server in that case) Info Currently gnmic only implements the dial-out support for Nokia 1 SR OS 20.5.r1+ routers.","title":"Description"},{"location":"cmd/listen/#usage","text":"gnmic listen [global flags] [local flags]","title":"Usage"},{"location":"cmd/listen/#flags","text":"","title":"Flags"},{"location":"cmd/listen/#address","text":"The address flag [-a | --address] tells gnmic which address to bind an internal server to in an address:port format, e.g.: 0.0.0.0:57400 .","title":"address"},{"location":"cmd/listen/#tls-cert","text":"Path to the TLS certificate can be supplied with --tls-cert flag.","title":"tls-cert"},{"location":"cmd/listen/#tls-key","text":"Path to the private key can be supplied with --tls-key flag.","title":"tls-key"},{"location":"cmd/listen/#max-concurrent-streams","text":"To limit the maximum number of concurrent HTTP2 streams use the --max-concurrent-streams flag, the default value is 256.","title":"max-concurrent-streams"},{"location":"cmd/listen/#examples","text":"","title":"Examples"},{"location":"cmd/listen/#tls-disabled-server","text":"To start gnmic as a server listening on all interfaces without TLS support is as simple as: gnmic listen -a 0.0.0.0:57400 SR OS configuration for non TLS dialout connections /configure system telemetry destination-group \"dialout\" allow-unsecure-connection /configure system telemetry destination-group \"dialout\" destination 10.2.0.99 port 57400 router-instance \"management\" /configure system telemetry persistent-subscriptions { } /configure system telemetry persistent-subscriptions subscription \"dialout\" admin-state enable /configure system telemetry persistent-subscriptions subscription \"dialout\" sensor-group \"port_stats\" /configure system telemetry persistent-subscriptions subscription \"dialout\" mode sample /configure system telemetry persistent-subscriptions subscription \"dialout\" sample-interval 1000 /configure system telemetry persistent-subscriptions subscription \"dialout\" destination-group \"dialout\" /configure system telemetry persistent-subscriptions subscription \"dialout\" encoding bytes /configure system telemetry sensor-groups { } /configure system telemetry sensor-groups { sensor-group \"port_stats\" } /configure system telemetry sensor-groups { sensor-group \"port_stats\" path \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" }","title":"TLS disabled server"},{"location":"cmd/listen/#tls-enabled-server","text":"By using tls-cert and tls-key flags it is possible to run gnmic with TLS. gnmic listen -a 0.0.0.0:57400 --tls-cert gnmic.pem --tls-key gnmic-key.pem SR OS configuration for a TLS enabled dialout connections The configuration below does not utilise router-side certificates and uses the certificate provided by the server (gnmic). The router will also not verify the certificate. /configure system telemetry destination-group \"dialout\" tls-client-profile \"client-tls\" /configure system telemetry destination-group \"dialout\" destination 10.2.0.99 port 57400 router-instance \"management\" /configure system telemetry persistent-subscriptions { } /configure system telemetry persistent-subscriptions subscription \"dialout\" admin-state enable /configure system telemetry persistent-subscriptions subscription \"dialout\" sensor-group \"port_stats\" /configure system telemetry persistent-subscriptions subscription \"dialout\" mode sample /configure system telemetry persistent-subscriptions subscription \"dialout\" sample-interval 1000 /configure system telemetry persistent-subscriptions subscription \"dialout\" destination-group \"dialout\" /configure system telemetry persistent-subscriptions subscription \"dialout\" encoding bytes /configure system telemetry sensor-groups { } /configure system telemetry sensor-groups { sensor-group \"port_stats\" } /configure system telemetry sensor-groups { sensor-group \"port_stats\" path \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" } /configure system security tls client-cipher-list \"client-ciphers\" { } /configure system security tls client-cipher-list \"client-ciphers\" cipher 1 name tls-rsa-with-aes128-cbc-sha /configure system security tls client-cipher-list \"client-ciphers\" cipher 2 name tls-rsa-with-aes128-cbc-sha256 /configure system security tls client-cipher-list \"client-ciphers\" cipher 3 name tls-rsa-with-aes256-cbc-sha /configure system security tls client-cipher-list \"client-ciphers\" cipher 4 name tls-rsa-with-aes256-cbc-sha256 /configure system security tls client-tls-profile \"client-tls\" admin-state enable /configure system security tls client-tls-profile \"client-tls\" cipher-list \"client-ciphers\" Nokia dial-out proto definition can be found in karimra/sros-dialout \u21a9","title":"TLS enabled server"},{"location":"cmd/path/","text":"Description # With path command it is possible to generate and search through the XPATH style paths extracted from a YANG file. Warning Experimental feature. Only supports Nokia conf and state models in combined variant 1 . By extracting the XPATH styled paths from a YANG model it is made possible to utilize CLI search tools like awk , sed and alike to find the paths satisfying specific matching rules. The embedded search capability allows to perform a quick and simple search through the model's paths using simple inclusion/exclusion operators. Flags # file # With the mandatory --file flag user specifies the path to a YANG file to extract paths from. module # The [-m | --module] flag specifies the module name that is contained in the referenced YANG file. Defaults to nokia-state ; to extract configuration paths the nokia-conf module name should be provided. types # When --types flag is present the extracted paths will also have a corresponding type printed out. path-type # The --path-type flag governs which style is used to display the path information. The default value is xpath which will produce the XPATH compatible paths. The other option is gnmi which will result in the paths to be formatted using the gNMI Path Conventions. XPATH /state/sfm[sfm-slot=*]/hardware-data/firmware-revision-status gNMI elem:{name:\"state\"} elem:{name:\"sfm\" key:{key:\"sfm-slot\" value:\"*\"}} elem:{name:\"hardware-data\"} elem:{name:\"firmware-revision-status\"} search # With the --search flag present an interactive CLI search dialog is displayed that allows to navigate through the paths list and perform a search. \u276f gnmic path --file _test/nokia-state-combined.yang --search Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190 and : toggles search ? select path: /state/aaa/radius/statistics/coa/dropped/bad-authentication /state/aaa/radius/statistics/coa/dropped/missing-auth-policy \u25b8 /state/aaa/radius/statistics/coa/dropped/invalid /state/aaa/radius/statistics/coa/dropped/missing-resource /state/aaa/radius/statistics/coa/received /state/aaa/radius/statistics/coa/accepted /state/aaa/radius/statistics/coa/rejected /state/aaa/radius/statistics/disconnect-messages/dropped/bad-authentication /state/aaa/radius/statistics/disconnect-messages/dropped/missing-auth-policy \u2193 /state/aaa/radius/statistics/disconnect-messages/dropped/invalid Examples # # output to stdout the XPATH styled paths # from the nokia-state module of nokia-state-combined.yang file gnmic path --file nokia-state-combined.yang # from the nokia-conf module gnmic path -m nokia-conf --file nokia-conf-combined.yang # with the gNMI styled paths gnmic path --file nokia-state-combined.yang --path-type gnmi # with path types gnmic path --file nokia-state-combined.yang --types # entering the interactive navigation prompt gnmic path --file nokia-state-combined.yang --search Nokia combined models can be found in nokia/7x50_YangModels repo. \u21a9","title":"Path"},{"location":"cmd/path/#description","text":"With path command it is possible to generate and search through the XPATH style paths extracted from a YANG file. Warning Experimental feature. Only supports Nokia conf and state models in combined variant 1 . By extracting the XPATH styled paths from a YANG model it is made possible to utilize CLI search tools like awk , sed and alike to find the paths satisfying specific matching rules. The embedded search capability allows to perform a quick and simple search through the model's paths using simple inclusion/exclusion operators.","title":"Description"},{"location":"cmd/path/#flags","text":"","title":"Flags"},{"location":"cmd/path/#file","text":"With the mandatory --file flag user specifies the path to a YANG file to extract paths from.","title":"file"},{"location":"cmd/path/#module","text":"The [-m | --module] flag specifies the module name that is contained in the referenced YANG file. Defaults to nokia-state ; to extract configuration paths the nokia-conf module name should be provided.","title":"module"},{"location":"cmd/path/#types","text":"When --types flag is present the extracted paths will also have a corresponding type printed out.","title":"types"},{"location":"cmd/path/#path-type","text":"The --path-type flag governs which style is used to display the path information. The default value is xpath which will produce the XPATH compatible paths. The other option is gnmi which will result in the paths to be formatted using the gNMI Path Conventions. XPATH /state/sfm[sfm-slot=*]/hardware-data/firmware-revision-status gNMI elem:{name:\"state\"} elem:{name:\"sfm\" key:{key:\"sfm-slot\" value:\"*\"}} elem:{name:\"hardware-data\"} elem:{name:\"firmware-revision-status\"}","title":"path-type"},{"location":"cmd/path/#search","text":"With the --search flag present an interactive CLI search dialog is displayed that allows to navigate through the paths list and perform a search. \u276f gnmic path --file _test/nokia-state-combined.yang --search Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190 and : toggles search ? select path: /state/aaa/radius/statistics/coa/dropped/bad-authentication /state/aaa/radius/statistics/coa/dropped/missing-auth-policy \u25b8 /state/aaa/radius/statistics/coa/dropped/invalid /state/aaa/radius/statistics/coa/dropped/missing-resource /state/aaa/radius/statistics/coa/received /state/aaa/radius/statistics/coa/accepted /state/aaa/radius/statistics/coa/rejected /state/aaa/radius/statistics/disconnect-messages/dropped/bad-authentication /state/aaa/radius/statistics/disconnect-messages/dropped/missing-auth-policy \u2193 /state/aaa/radius/statistics/disconnect-messages/dropped/invalid","title":"search"},{"location":"cmd/path/#examples","text":"# output to stdout the XPATH styled paths # from the nokia-state module of nokia-state-combined.yang file gnmic path --file nokia-state-combined.yang # from the nokia-conf module gnmic path -m nokia-conf --file nokia-conf-combined.yang # with the gNMI styled paths gnmic path --file nokia-state-combined.yang --path-type gnmi # with path types gnmic path --file nokia-state-combined.yang --types # entering the interactive navigation prompt gnmic path --file nokia-state-combined.yang --search Nokia combined models can be found in nokia/7x50_YangModels repo. \u21a9","title":"Examples"},{"location":"cmd/set/","text":"Description # The set command represents the gNMI Set RPC . It is used to send a Set Request to the specified target(s) and expects one Set Response per target. Set RPC allows the client to modify the state of data on the target. The data specified referenced by a path can be updated, replaced or deleted . Usage # gnmic [global-flags] set [local-flags] The Set Request can be any of (or a combination of) update, replace or/and delete operations. Common flags # prefix # The --prefix flag sets a common prefix to all paths specified using the local --path flag. Defaults to \"\" . If a user needs to provide origin information to the Path message, the following pattern should be used for the path string: \"origin:path\" : gnmic sub --path \"openconfig-interfaces:interfaces/interface\" target # With the optional [--target] flag it is possible to supply the path target information in the prefix field of the SetRequest message. Update # There are several ways to perform an update operation with gNMI Set RPC: 1. in-line update, implicit type # Using both --update-path and --update-value flags, a user can update a value for a given path. Warning With in-line update method the values provided with --update-value flag are always set to JSON type. If you need to specify other type for the value (i.e. JSON_IETF), use the explicit type method. gnmic set --update-path /configure/system/name --update-value router1 gnmic set --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --update-value enable The above 2 updates can be combined in the same cli command: gnmic set --update-path /configure/system/name \\ --update-value router1 \\ --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --update-value enable 2. in-line update, explicit type # Using the update flag --update , one can specify the path, value type and value in a single parameter using a delimiter --delimiter . Delimiter string defaults to \":::\" . Supported types: json, json_ietf, string, int, uint, bool, decimal, float, bytes, ascii. # path:::value-type:::value gnmic set --update /configure/system/name:::json:::router1 gnmic set --update /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state:::json:::enable 3. update with a value from JSON or YAML file # It is also possible to specify the values from a local JSON or YAML file using --update-file flag for the value and --update-path for the path. In which case the value encoding will be determined by the global flag [ -e | --encoding ] , both JSON and JSON_IETF are supported The file's format is identified by its extension, json: .json and yaml .yaml or .yml . interface.json { \"admin-state\" : \"enable\" , \"ipv4\" : { \"primary\" : { \"address\" : \"1.1.1.1\" , \"prefix-length\" : 32 } } } gnmic set --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] \\ --update-file interface.json interface.yml \"admin-state\" : enable \"ipv4\" : \"primary\" : \"address\" : 1 .1.1.1 \"prefix-length\" : 32 gnmic set --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] \\ --update-file interface.yml Replace # There are 3 main ways to specify a replace operation: 1. in-line replace, implicit type # Using both --replace-path and --replace-value flags, a user can replace a value for a given path. The type of the value is implicitly set to JSON : gnmic set --replace-path /configure/system/name --replace-value router1 gnmic set --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --replace-value enable The above 2 commands can be packed in the same cli command: gnmic set --replace-path /configure/system/name \\ --replace-value router1 \\ --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --replace-value enable 2. in-line replace, explicit type # Using the replace flag --replace , you can specify the path, value type and value in a single parameter using a delimiter --delimiter . Delimiter string defaults to \":::\" . Supported types: json, json_ietf, string, int, uint, bool, decimal, float, bytes, ascii. gnmic set --replace /configure/system/name:::json:::router1 gnmic set --replace /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state:::json:::enable 3. replace with a value from JSON or YAML file # It is also possible to specify the values from a local JSON or YAML file using flag --replace-file for the value and --replace-path for the path. In which case the value encoding will be determined by the global flag [ -e | --encoding ] , both JSON and JSON_IETF are supported The file is identified by its extension, json: .json and yaml .yaml or .yml . interface.json { \"admin-state\" : \"enable\" , \"ipv4\" : { \"primary\" : { \"address\" : \"1.1.1.1\" , \"prefix-length\" : 32 } } } interface.yml \"admin-state\" : enable \"ipv4\" : \"primary\" : \"address\" : 1 .1.1.1 \"prefix-length\" : 32 Then refer to the file with --replace-file flag gnmic set --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] \\ --replace-file interface.json Delete # A deletion operation within the Set RPC is specified using the delete flag --delete . It takes an XPATH pointing to the config node to be deleted: gnmic set --delete \"/configure/router[router-name=Base]/interface[interface-name=dummy_interface]\" Examples # 1. update # in-line value # gnmic -a <ip:port> set --update-path /configure/system/name \\ --update-value <system_name> value from JSON file # cat jsonFile.json { \"name\" : \"router1\" } gnmic -a <ip:port> set --update-path /configure/system \\ --update-file <jsonFile.json> specify value type # gnmic -a <ip:port> set --update /configure/system/name:::json:::router1 gnmic -a <ip:port> set --update /configure/system/name@json@router1 \\ --delimiter @ 2. replace # cat interface.json { \"address\" : \"1.1.1.1\" , \"prefix-length\" : 32 } gnmic -a <ip:port> --insecure \\ set --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = interface1 ] /ipv4/primary \\ --replace-file interface.json 3. delete # gnmic -a <ip:port> --insecure set --delete /configure/router [ router-name = Base ] /interface [ interface-name = interface1 ]","title":"Set"},{"location":"cmd/set/#description","text":"The set command represents the gNMI Set RPC . It is used to send a Set Request to the specified target(s) and expects one Set Response per target. Set RPC allows the client to modify the state of data on the target. The data specified referenced by a path can be updated, replaced or deleted .","title":"Description"},{"location":"cmd/set/#usage","text":"gnmic [global-flags] set [local-flags] The Set Request can be any of (or a combination of) update, replace or/and delete operations.","title":"Usage"},{"location":"cmd/set/#common-flags","text":"","title":"Common flags"},{"location":"cmd/set/#prefix","text":"The --prefix flag sets a common prefix to all paths specified using the local --path flag. Defaults to \"\" . If a user needs to provide origin information to the Path message, the following pattern should be used for the path string: \"origin:path\" : gnmic sub --path \"openconfig-interfaces:interfaces/interface\"","title":"prefix"},{"location":"cmd/set/#target","text":"With the optional [--target] flag it is possible to supply the path target information in the prefix field of the SetRequest message.","title":"target"},{"location":"cmd/set/#update","text":"There are several ways to perform an update operation with gNMI Set RPC:","title":"Update"},{"location":"cmd/set/#1-in-line-update-implicit-type","text":"Using both --update-path and --update-value flags, a user can update a value for a given path. Warning With in-line update method the values provided with --update-value flag are always set to JSON type. If you need to specify other type for the value (i.e. JSON_IETF), use the explicit type method. gnmic set --update-path /configure/system/name --update-value router1 gnmic set --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --update-value enable The above 2 updates can be combined in the same cli command: gnmic set --update-path /configure/system/name \\ --update-value router1 \\ --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --update-value enable","title":"1. in-line update, implicit type"},{"location":"cmd/set/#2-in-line-update-explicit-type","text":"Using the update flag --update , one can specify the path, value type and value in a single parameter using a delimiter --delimiter . Delimiter string defaults to \":::\" . Supported types: json, json_ietf, string, int, uint, bool, decimal, float, bytes, ascii. # path:::value-type:::value gnmic set --update /configure/system/name:::json:::router1 gnmic set --update /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state:::json:::enable","title":"2. in-line update, explicit type"},{"location":"cmd/set/#3-update-with-a-value-from-json-or-yaml-file","text":"It is also possible to specify the values from a local JSON or YAML file using --update-file flag for the value and --update-path for the path. In which case the value encoding will be determined by the global flag [ -e | --encoding ] , both JSON and JSON_IETF are supported The file's format is identified by its extension, json: .json and yaml .yaml or .yml . interface.json { \"admin-state\" : \"enable\" , \"ipv4\" : { \"primary\" : { \"address\" : \"1.1.1.1\" , \"prefix-length\" : 32 } } } gnmic set --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] \\ --update-file interface.json interface.yml \"admin-state\" : enable \"ipv4\" : \"primary\" : \"address\" : 1 .1.1.1 \"prefix-length\" : 32 gnmic set --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] \\ --update-file interface.yml","title":"3. update with a value from JSON or YAML file"},{"location":"cmd/set/#replace","text":"There are 3 main ways to specify a replace operation:","title":"Replace"},{"location":"cmd/set/#1-in-line-replace-implicit-type","text":"Using both --replace-path and --replace-value flags, a user can replace a value for a given path. The type of the value is implicitly set to JSON : gnmic set --replace-path /configure/system/name --replace-value router1 gnmic set --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --replace-value enable The above 2 commands can be packed in the same cli command: gnmic set --replace-path /configure/system/name \\ --replace-value router1 \\ --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --replace-value enable","title":"1. in-line replace, implicit type"},{"location":"cmd/set/#2-in-line-replace-explicit-type","text":"Using the replace flag --replace , you can specify the path, value type and value in a single parameter using a delimiter --delimiter . Delimiter string defaults to \":::\" . Supported types: json, json_ietf, string, int, uint, bool, decimal, float, bytes, ascii. gnmic set --replace /configure/system/name:::json:::router1 gnmic set --replace /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state:::json:::enable","title":"2. in-line replace, explicit type"},{"location":"cmd/set/#3-replace-with-a-value-from-json-or-yaml-file","text":"It is also possible to specify the values from a local JSON or YAML file using flag --replace-file for the value and --replace-path for the path. In which case the value encoding will be determined by the global flag [ -e | --encoding ] , both JSON and JSON_IETF are supported The file is identified by its extension, json: .json and yaml .yaml or .yml . interface.json { \"admin-state\" : \"enable\" , \"ipv4\" : { \"primary\" : { \"address\" : \"1.1.1.1\" , \"prefix-length\" : 32 } } } interface.yml \"admin-state\" : enable \"ipv4\" : \"primary\" : \"address\" : 1 .1.1.1 \"prefix-length\" : 32 Then refer to the file with --replace-file flag gnmic set --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] \\ --replace-file interface.json","title":"3. replace with a value from JSON or YAML file"},{"location":"cmd/set/#delete","text":"A deletion operation within the Set RPC is specified using the delete flag --delete . It takes an XPATH pointing to the config node to be deleted: gnmic set --delete \"/configure/router[router-name=Base]/interface[interface-name=dummy_interface]\"","title":"Delete"},{"location":"cmd/set/#examples","text":"","title":"Examples"},{"location":"cmd/set/#1-update","text":"","title":"1. update"},{"location":"cmd/set/#in-line-value","text":"gnmic -a <ip:port> set --update-path /configure/system/name \\ --update-value <system_name>","title":"in-line value"},{"location":"cmd/set/#value-from-json-file","text":"cat jsonFile.json { \"name\" : \"router1\" } gnmic -a <ip:port> set --update-path /configure/system \\ --update-file <jsonFile.json>","title":"value from JSON file"},{"location":"cmd/set/#specify-value-type","text":"gnmic -a <ip:port> set --update /configure/system/name:::json:::router1 gnmic -a <ip:port> set --update /configure/system/name@json@router1 \\ --delimiter @","title":"specify value type"},{"location":"cmd/set/#2-replace","text":"cat interface.json { \"address\" : \"1.1.1.1\" , \"prefix-length\" : 32 } gnmic -a <ip:port> --insecure \\ set --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = interface1 ] /ipv4/primary \\ --replace-file interface.json","title":"2. replace"},{"location":"cmd/set/#3-delete","text":"gnmic -a <ip:port> --insecure set --delete /configure/router [ router-name = Base ] /interface [ interface-name = interface1 ]","title":"3. delete"},{"location":"cmd/subscribe/","text":"Description # The [subscribe | sub] command represents the gNMI Subscribe RPC . It is used to send a Subscribe Request to the specified target(s) and expects one or multiple Subscribe Response Usage # gnmic [global-flags] subscribe [local-flags] Local Flags # The subscribe command supports the following local flags: prefix # The [--prefix] flag sets a common prefix to all paths specified using the local --path flag. Defaults to \"\" . path # The path flag [--path] is used to specify the path(s) to which the client wants to subscribe. Multiple paths can be specified, either as a comma separated string: gnmic subscribe --path \"/state/ports[port-id=*],\\ /state/router[router-name=*]/interface[interface-name=*]\" Or using repeated --path flags: gnmic sub --path \"/state/ports[port-id=*]\" \\ --path \"/state/router[router-name=*]/interface[interface-name=*]\" If a user needs to provide origin information to the Path message, the following pattern should be used for the path string: \"origin:path\" : gnmic sub --path \"openconfig-interfaces:interfaces/interface\" target # With the optional [--target] flag it is possible to supply the path target information in the prefix field of the SubscriptionList message. model # The [--model] flag is used to specify the schema definition modules that the target should use when extracting the data to stream back. qos # The [--qos] flag specifies the packet marking that is to be used for the responses to the subscription request. Default marking is set to 20 . If qos marking is not supported by a target the marking can be disabled by setting the value to 0 . mode # The [--mode] mode flag specifies the mode of subscription to be created. This may be one of: ONCE , STREAM or POLL . It is case insensitive and defaults to STREAM . stream subscription mode # The [--stream-mode] flag is used to specify the stream subscription mode. This may be one of: ON_CHANGE, SAMPLE or TARGET_DEFINED This flag applies only if --mode is set to STREAM . It is case insensitive and defaults to SAMPLE . sample interval # The [--sample-interval] flag is used to specify the sample interval to be used by the target to send samples to the client. This flag applies only in case --mode is set to STREAM and --stream-mode is set to SAMPLE . Valid formats: 1s, 1m30s, 1h . Defaults to 0s which is the lowest interval supported by a target. heartbeat interval # The [--heartbeat-interval] flag is used to specify the server heartbeat interval. The heartbeat interval value can be specified along with ON_CHANGE or SAMPLE stream subscriptions modes. ON_CHANGE : The value of the data item(s) MUST be re-sent once per heartbeat interval regardless of whether the value has changed or not. SAMPLE : The target MUST generate one telemetry update per heartbeat interval, regardless of whether the --suppress-redundant flag is set to true. quiet # With [--quiet] flag set gnmic will not output subscription responses to stdout . The --quiet flag is useful when gnmic exports the received data to one of the export providers. suppress redundant # When the [--suppress-redundant] flag is set to true, the target SHOULD NOT generate a telemetry update message unless the value of the path being reported on has changed since the last update was generated. This flag applies only in case --mode is set to STREAM and --stream-mode is set to SAMPLE . updates only # When the [--updates-only] flag is set to true, the target MUST not transmit the current state of the paths that the client has subscribed to, but rather should send only updates to them. name # The [--name] flag is used to trigger one or multiple subscriptions already defined in the configuration file see defining subscriptions Examples # 1. streaming, target-defined, 10s interval # gnmic -a <ip:port> sub --path /state/port [ port-id = * ] /statistics 2. streaming, sample, 30s interval # gnmic -a <ip:port> sub --path \"/state/port[port-id=*]/statistics\" \\ --sample-interval 30s 3. streaming, on-change, heartbeat interval 1min # gnmic -a <ip:port> sub --path \"/state/port[port-id=*]/statistics\" \\ --stream-mode on-change \\ --heartbeat-interval 1m 4. once subscription # gnmic -a <ip:port> sub --path \"/state/port[port-id=*]/statistics\" \\ --mode once","title":"Subscribe"},{"location":"cmd/subscribe/#description","text":"The [subscribe | sub] command represents the gNMI Subscribe RPC . It is used to send a Subscribe Request to the specified target(s) and expects one or multiple Subscribe Response","title":"Description"},{"location":"cmd/subscribe/#usage","text":"gnmic [global-flags] subscribe [local-flags]","title":"Usage"},{"location":"cmd/subscribe/#local-flags","text":"The subscribe command supports the following local flags:","title":"Local Flags"},{"location":"cmd/subscribe/#prefix","text":"The [--prefix] flag sets a common prefix to all paths specified using the local --path flag. Defaults to \"\" .","title":"prefix"},{"location":"cmd/subscribe/#path","text":"The path flag [--path] is used to specify the path(s) to which the client wants to subscribe. Multiple paths can be specified, either as a comma separated string: gnmic subscribe --path \"/state/ports[port-id=*],\\ /state/router[router-name=*]/interface[interface-name=*]\" Or using repeated --path flags: gnmic sub --path \"/state/ports[port-id=*]\" \\ --path \"/state/router[router-name=*]/interface[interface-name=*]\" If a user needs to provide origin information to the Path message, the following pattern should be used for the path string: \"origin:path\" : gnmic sub --path \"openconfig-interfaces:interfaces/interface\"","title":"path"},{"location":"cmd/subscribe/#target","text":"With the optional [--target] flag it is possible to supply the path target information in the prefix field of the SubscriptionList message.","title":"target"},{"location":"cmd/subscribe/#model","text":"The [--model] flag is used to specify the schema definition modules that the target should use when extracting the data to stream back.","title":"model"},{"location":"cmd/subscribe/#qos","text":"The [--qos] flag specifies the packet marking that is to be used for the responses to the subscription request. Default marking is set to 20 . If qos marking is not supported by a target the marking can be disabled by setting the value to 0 .","title":"qos"},{"location":"cmd/subscribe/#mode","text":"The [--mode] mode flag specifies the mode of subscription to be created. This may be one of: ONCE , STREAM or POLL . It is case insensitive and defaults to STREAM .","title":"mode"},{"location":"cmd/subscribe/#stream-subscription-mode","text":"The [--stream-mode] flag is used to specify the stream subscription mode. This may be one of: ON_CHANGE, SAMPLE or TARGET_DEFINED This flag applies only if --mode is set to STREAM . It is case insensitive and defaults to SAMPLE .","title":"stream subscription mode"},{"location":"cmd/subscribe/#sample-interval","text":"The [--sample-interval] flag is used to specify the sample interval to be used by the target to send samples to the client. This flag applies only in case --mode is set to STREAM and --stream-mode is set to SAMPLE . Valid formats: 1s, 1m30s, 1h . Defaults to 0s which is the lowest interval supported by a target.","title":"sample interval"},{"location":"cmd/subscribe/#heartbeat-interval","text":"The [--heartbeat-interval] flag is used to specify the server heartbeat interval. The heartbeat interval value can be specified along with ON_CHANGE or SAMPLE stream subscriptions modes. ON_CHANGE : The value of the data item(s) MUST be re-sent once per heartbeat interval regardless of whether the value has changed or not. SAMPLE : The target MUST generate one telemetry update per heartbeat interval, regardless of whether the --suppress-redundant flag is set to true.","title":"heartbeat interval"},{"location":"cmd/subscribe/#quiet","text":"With [--quiet] flag set gnmic will not output subscription responses to stdout . The --quiet flag is useful when gnmic exports the received data to one of the export providers.","title":"quiet"},{"location":"cmd/subscribe/#suppress-redundant","text":"When the [--suppress-redundant] flag is set to true, the target SHOULD NOT generate a telemetry update message unless the value of the path being reported on has changed since the last update was generated. This flag applies only in case --mode is set to STREAM and --stream-mode is set to SAMPLE .","title":"suppress redundant"},{"location":"cmd/subscribe/#updates-only","text":"When the [--updates-only] flag is set to true, the target MUST not transmit the current state of the paths that the client has subscribed to, but rather should send only updates to them.","title":"updates only"},{"location":"cmd/subscribe/#name","text":"The [--name] flag is used to trigger one or multiple subscriptions already defined in the configuration file see defining subscriptions","title":"name"},{"location":"cmd/subscribe/#examples","text":"","title":"Examples"},{"location":"cmd/subscribe/#1-streaming-target-defined-10s-interval","text":"gnmic -a <ip:port> sub --path /state/port [ port-id = * ] /statistics","title":"1. streaming, target-defined, 10s interval"},{"location":"cmd/subscribe/#2-streaming-sample-30s-interval","text":"gnmic -a <ip:port> sub --path \"/state/port[port-id=*]/statistics\" \\ --sample-interval 30s","title":"2. streaming, sample, 30s interval"},{"location":"cmd/subscribe/#3-streaming-on-change-heartbeat-interval-1min","text":"gnmic -a <ip:port> sub --path \"/state/port[port-id=*]/statistics\" \\ --stream-mode on-change \\ --heartbeat-interval 1m","title":"3. streaming, on-change, heartbeat interval 1min"},{"location":"cmd/subscribe/#4-once-subscription","text":"gnmic -a <ip:port> sub --path \"/state/port[port-id=*]/statistics\" \\ --mode once","title":"4. once subscription"}]}